# Generated by Django 5.1.2 on 2024-11-01 07:05

from django.db import migrations
from django.contrib.auth.hashers import make_password

def create_default_roles(apps, schema_editor):
    Role = apps.get_model('usermgmt', 'Role')

    Role.objects.get_or_create(
        name="System Administrator", 
        defaults={'is_staff': True, 'is_superuser': True}
    )
    Role.objects.get_or_create(
        name="Administrator", 
        defaults={'is_staff': True, 'is_superuser': False}
    )
    Role.objects.get_or_create(
        name="Employee", 
        defaults={'is_staff': False, 'is_superuser': False}
    )

def create_default_departments(apps, schema_editor):
    Department = apps.get_model('usermgmt', 'Department')
    Role = apps.get_model('usermgmt', 'Role')

    system_admin_role = Role.objects.get(name="System Administrator")
    admin_role = Role.objects.get(name="Administrator")
    employee_role = Role.objects.get(name="Employee")

    default_dept, _ = Department.objects.get_or_create(name="System Administration")
    human_resources, _ = Department.objects.get_or_create(name="Human Resources")
    na_dept, _ = Department.objects.get_or_create(name="N/A")

    default_dept.role.set([system_admin_role])
    human_resources.role.set([admin_role])
    na_dept.role.set([employee_role])

def create_default_user(apps, schema_editor):
    User = apps.get_model('usermgmt', 'User')
    Department = apps.get_model('usermgmt', 'Department')

    department = Department.objects.filter(name="System Administration").first()

    if department:
        user, created = User.objects.get_or_create(
            user_id="0",
            defaults={
                'first_name': "Admin",
                'last_name': "User",
                'email': "admin@ams.com",
                'birthdate': "2000-01-01",
                'contact_number': "00000000000",
                'department': department,
                'is_active': True,
                'is_staff': True,
                'is_superuser': True,
                'password': make_password("admin")
            }
        )

        if not created:
            user.is_staff = True    
            user.password = make_password("admin")
            user.save()
            print("Updated password for default Admin User")
        else:
            print("Created default Admin User")

class Migration(migrations.Migration):
    dependencies = [
        ('usermgmt', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_default_roles),
        migrations.RunPython(create_default_departments),
        migrations.RunPython(create_default_user),
    ]
